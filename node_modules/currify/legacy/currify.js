'use strict';

var f = function f(fn) {
  return [
  /*eslint no-unused-vars: 0*/
  function (a) {
    return fn.apply(void 0, arguments);
  }, function (a, b) {
    return fn.apply(void 0, arguments);
  }, function (a, b, c) {
    return fn.apply(void 0, arguments);
  }, function (a, b, c, d) {
    return fn.apply(void 0, arguments);
  }, function (a, b, c, d, e) {
    return fn.apply(void 0, arguments);
  }];
};

var currify = function currify(fn) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  check(fn);
  if (args.length >= fn.length) return fn.apply(void 0, args);

  var again = function again() {
    for (var _len2 = arguments.length, args2 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args2[_key2] = arguments[_key2];
    }

    return currify.apply(void 0, [fn].concat(args.concat(args2)));
  };

  var count = fn.length - args.length - 1;
  var func = f(again)[count];
  return func || again;
};

module.exports = currify;

function check(fn) {
  if (typeof fn !== 'function') throw Error('fn should be function!');
}