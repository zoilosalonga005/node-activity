'use strict';

var promisify = require('es6-promisify').promisify;

var currify = require('currify/legacy');

module.exports = function (fn, ctx) {
  check(fn);
  checkCount(fn.length);
  var f = fn.bind(ctx);
  var funcs = [function (a) {
    return promisify(f, ctx)(a);
  }, function (a, b) {
    return promisify(f, ctx)(a, b);
  }, function (a, b, c) {
    return promisify(f, ctx)(a, b, c);
  }, function (a, b, c, d) {
    return promisify(f, ctx)(a, b, c, d);
  }, function (a, b, c, d, e) {
    return promisify(f, ctx)(a, b, c, d, e);
  }, function (a, b, c, d, e, x) {
    return promisify(f, ctx)(a, b, c, d, e, x);
  }, function (a, b, c, d, e, x, g) {
    return promisify(f, ctx)(a, b, c, d, e, x, g);
  }];
  var count = f.length - 2;
  return currify(funcs[count]);
};

function check(fn) {
  if (typeof fn !== 'function') throw Error('fn should be a function!');
}

function checkCount(count) {
  if (count > 8) throw Error('fn takes to much arguments, up to 8 supported');
}