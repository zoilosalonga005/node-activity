import { Context } from './context.js';
import { Middleware } from './middleware.js';
export declare const Method: (method: string) => ({ req }: Context) => boolean;
export declare const Get: ({ req }: Context) => boolean;
export declare const Post: ({ req }: Context) => boolean;
export declare const Put: ({ req }: Context) => boolean;
export declare const Patch: ({ req }: Context) => boolean;
export declare const Delete: ({ req }: Context) => boolean;
export declare const Head: ({ req }: Context) => boolean;
export declare const Options: ({ req }: Context) => boolean;
export declare const Header: (header: string, value: string) => ({ req }: Context) => boolean;
export declare const Host: (host: string) => ({ req }: Context) => boolean;
export declare const Referer: (host: string) => ({ req }: Context) => boolean;
export declare const Path: (pattern: string) => ({ req: { url, params } }: Context) => boolean;
export declare type RouteCondition = (context: Context) => boolean;
export interface Route {
    conditions: RouteCondition[];
    middleware: Middleware;
}
export declare class Router {
    private readonly routes;
    constructor();
    get(pathname: string, ...middleware: Middleware[]): this;
    post(pathname: string, ...middleware: Middleware[]): this;
    put(pathname: string, ...middleware: Middleware[]): this;
    patch(pathname: string, ...middleware: Middleware[]): this;
    delete(pathname: string, ...middleware: Middleware[]): this;
    head(pathname: string, ...middleware: Middleware[]): this;
    all(...middleware: Middleware[]): this;
    middleware: Middleware;
    compose(conditions: RouteCondition[], ...middleware: Middleware[]): this;
    private resolve;
}
