import { preferredCharsets } from 'negotiator/lib/charset.js';
import { preferredEncodings } from 'negotiator/lib/encoding.js';
import { preferredLanguages } from 'negotiator/lib/language.js';
import { preferredMediaTypes } from 'negotiator/lib/mediaType.js';
const parseAccept = preferredMediaTypes;
const parseAcceptLanguage = preferredLanguages;
const parseAcceptEncoding = preferredEncodings;
const parseAcceptCharset = preferredCharsets;
export class Accepts {
    constructor(headers) {
        this.headers = headers;
        this._type = undefined;
        this._language = undefined;
        this._encoding = undefined;
        this._charset = undefined;
    }
    type(...values) {
        if (!this._type) {
            const header = this.headers.get('accept');
            this._type = header ? parseAccept(header.toLowerCase()) : [];
        }
        for (const accepted of this._type) {
            for (const value of values) {
                if (value === accepted ||
                    (accepted.startsWith('*') && value.endsWith(accepted.substr(1))) ||
                    (accepted.endsWith('*') &&
                        value.startsWith(accepted.substr(0, accepted.length - 2)))) {
                    return value;
                }
            }
        }
        return false;
    }
    language(...values) {
        if (!this._language) {
            const header = this.headers.get('accept-language');
            this._language = header ? parseAcceptLanguage(header.toLowerCase()) : [];
        }
        for (const accepted of this._language) {
            for (const value of values) {
                if (value === accepted || value.startsWith(accepted)) {
                    return value;
                }
            }
        }
        return false;
    }
    encoding(...values) {
        if (!this._encoding) {
            const header = this.headers.get('accept-encoding');
            this._encoding = header ? parseAcceptEncoding(header.toLowerCase()) : [];
        }
        for (const accepted of this._encoding) {
            for (const value of values) {
                if (value === accepted) {
                    return value;
                }
            }
        }
        return false;
    }
    charset(...values) {
        if (!this._charset) {
            const header = this.headers.get('accept-charset');
            this._charset = header ? parseAcceptCharset(header.toLowerCase()) : [];
        }
        for (const accepted of this._charset) {
            for (const value of values) {
                if (value === accepted) {
                    return value;
                }
            }
        }
        return false;
    }
}
