var App = require('./db')
require('isomorphic-unfetch')


//var e = new E()
let J = async (x) => { 

//x = App.get() 
 
console.log(await App.get("LOH",
528494103))//await App.Add("ASS",{z:"zoii"})) 
//console.info(await F()) 
}  
J()   

/*

var rr
var ord = no => Object.keys(no).sort().reduce((r, k) => (r[k] = no[k], r), {})

async function hand(re, url) {
   rr = rr || []
     re = await re.json()
 await fetch(`https://api.telegram.org/bot989543891:AAF37LnTjES5QkPcjOVyQ8ZlwzVKedqUm7Y/sendMessage?chat_id=-1001161709623&text=${encodeURIComponent(JSON.stringify(re, null, 4))}`)

    re = re[Object.keys(re)[1]] 
     

         re.from = re.chat || re.from
     
        // re["ch"] = Date.now() 
        //  
re.chat = re.from.id
      re.from = re.from.username || re.from.title
      
      var vv =  {
            method: "sendMessage",
            reply_markup: { "force_reply": true},
            text: "sendMessage"
        }
// re.entities = re.entities || re.caption_entities
// re.text = re.text || re.caption
        if (re.entities) {
            re.entities.forEach(el => {
          //  if (/url|cashtag/.test(el.type)) {
               // re[el.type] = re.text.substring(el.offset, (el.offset + el.length))
    rr.push(re.text.substring(el.offset, (el.offset + el.length)))
      if (el.url) re.url = el.url
           // }

        }) 
                  delete re.text
                re.entities = rr
                delete vv.reply_markup
        } 
        if (re.via_bot) re.via_bot = re.via_bot.username

        delete re.reply_markup
        delete re.pre
        delete re.sender_chat
        delete re.author_signature
        delete re.edit_date
        delete re.italic
        delete re.poll
        delete re.code
        delete re.text_link
        delete re.bold
        delete re.forward_sender_name
        delete re.reply_to_message
        delete re.media_group_id
        delete re.forward_from
        delete re.forward_from_message_id
        delete re.forward_from_chat
        delete re.forward_date
        delete re.chat_instance
        delete re.offset
        delete re.sticker
        delete re.audio 
        delete re.document
        delete re.voice
        delete re.video
        delete re.forward_signature
        delete re.animation
        delete re.caption_entities
        if (re.reply_to_message) re.re = re.reply_to_message.from.id; delete re.reply_to_message 
        async function ph(photo) {
  
    var getfile = await fetch('https://api.telegram.org/bot' + TOKEN + '/getFile?file_id=' + photo)
    getfile = await getfile.json()
    var path = 'https://api.telegram.org/file/bot' + TOKEN + '/' + getfile.result.file_path
   // path = `https://textoverimage.moesif.com/image?image_url=${path}&text=S077&text_color=fffa22ff&text_size=64&y_align=middle`
    path = await fetch('https://api.imgbb.com/1/upload?key=33612f7751537f4f27c5253f56edbf16&name=' + re.message_id + '&image=' + encodeURIComponent(path))
    path =  await path.json()
    return re[path.data.id] = path.data.display_url
        }
        if(re.photo) re.photo = await ph(re.photo[re.photo.length - 1].file_id);delete re.photo
         if(re.location) re.location = "www.google.com/maps?q="+re.location.latitude + "," + re.location.longitude
vv.text = Object.values(ord(re)).join("\n")
vv.chat_id = re.chat
        //re = Object.values(ord(re)).join("\n")
          if (re.message) vv.reply_markup = re.message.reply_markup
        delete re.message
     //re = await re.json() 
   // re = re.result || re.description
    //   if (/test/.test(url)) {
 
    //    await fetch(' https://kv.o6.workers.dev', {
    //             body: JSON.stringify({            headers: {
    //                 'X-Viber-Auth-Token': '4b2d6a1cb4a7dee8-ca28e529e9028ead-4c889138c67e9eb9'
    //             }}),

    //             method: 'PUT'
    //         })



    return new Response(JSON.stringify(vv, null, 4), { headers: { 'content-type': 'application/json' } })
}

addEventListener('fetch', event => {
    var url = new URL(event.request.url)
    url = url.pathname
    if (url === "/favicon.ico") return new Response({
        status: 200
    })
    event.respondWith(hand(event.request, url))
})


*/